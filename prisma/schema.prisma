generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ---------------------------
// User Roles
// ---------------------------
enum Role {
  CUSTOMER
  STAFF
  ADMIN
}

// ---------------------------
// Users
// ---------------------------
model User {
  id      String  @id @default(cuid())
  email   String  @unique
  name    String?
  role    Role    @default(CUSTOMER)
  clerkId String? @unique
  // Relations
  projects         Project[]  @relation("ProjectOwner")
  assignedProjects Project[]  @relation("ProjectAssignedTo")
  tasks            Task[]     @relation("UserAssignedTasks")
  blogPosts        BlogPost[]
  orders           Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ---------------------------
// Clients
// ---------------------------
model Client {
  id       String     @id @default(cuid())
  name     String
  email    String?
  phone    String?
  type     ClientType
  projects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ClientType {
  REALTOR
  HOMEOWNER
  INVESTOR
}

// ---------------------------
// Projects
// ---------------------------
model Project {
  id       String        @id @default(cuid())
  title    String
  type     ProjectType
  status   ProjectStatus @default(CONSULT)
  clientId String
  client   Client        @relation(fields: [clientId], references: [id])

  ownerId String?
  owner   User?   @relation("ProjectOwner", fields: [ownerId], references: [id])

  assignedToId String?
  assignedTo   User?   @relation("ProjectAssignedTo", fields: [assignedToId], references: [id])

  stageCost    Float?
  listPrice    Float?
  soldPrice    Float?
  daysOnMarket Int?
  propertyAddr String?
  startDate    DateTime?
  endDate      DateTime?
  notes        String?

  tasks     Task[]
  files     File[]
  picklists Picklist[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ProjectType {
  VACANT_STAGE
  OCCUPIED_STAGE
  RENTAL
  AIRBNB
  COMMERCIAL
  INTERIOR_DESIGN
  DESIGN_CONSULT
}

enum ProjectStatus {
  LEAD
  CONSULT
  QUOTE
  FOLLOWUP
  DESIGN
  STAGED
  DESTAGE
  CLOSED
  LOST
  WON
}

// ---------------------------
// Tasks
// ---------------------------
model Task {
  id          String     @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(PENDING)

  projectId String?
  project   Project? @relation(fields: [projectId], references: [id])

  assignedToId String?
  assignedTo   User?   @relation("UserAssignedTasks", fields: [assignedToId], references: [id])

  dueDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  DONE
}

// ---------------------------
// Files (uploads for projects)
// ---------------------------
model File {
  id         String   @id @default(cuid())
  url        String
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id])
  uploadedAt DateTime @default(now())
}

// ---------------------------
// Inventory (furniture/decor)
// ---------------------------
model InventoryItem {
  id          String            @id @default(cuid())
  name        String
  description String?
  category    InventoryCategory
  price       Float
  inStock     Boolean           @default(true)
  images      String[]
  picklists   PicklistItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum InventoryCategory {
  SOFA
  BENCH
  CONSOLE_TABLE
  SIDE_TABLE
  NIGHT_STAND
  BEDFRAME
  RUG
  DECOR
  TREE
  ARM_CHAIR
  DESK
  BAR_STOOL
  COFFEE_TABLE
  DINING_TABLE
  DINING_CHAIR
  BAR_TABLE
}

// ---------------------------
// Picklists
// ---------------------------
model Picklist {
  id        String         @id @default(cuid())
  projectId String
  project   Project        @relation(fields: [projectId], references: [id])
  items     PicklistItem[]

  createdAt DateTime @default(now())
}

model PicklistItem {
  id            String        @id @default(cuid())
  picklistId    String
  picklist      Picklist      @relation(fields: [picklistId], references: [id])
  inventoryId   String
  inventoryItem InventoryItem @relation(fields: [inventoryId], references: [id])
  quantity      Int           @default(1)
}

// ---------------------------
// Products (for store/marketplace)
// ---------------------------
model Product {
  id          String           @id @default(cuid())
  name        String
  description String?
  categories  String[]
  colors      String[]
  material    String?
  variants    ProductVariant[]
  images      String[]
  isFeatured  Boolean          @default(false)
  available   Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  OrderItem   OrderItem[]
}

model ProductVariant {
  id            String      @id @default(cuid())
  productId     String
  product       Product     @relation(fields: [productId], references: [id])
  variantName   String
  price         Float
  discountPrice Float?
  stock         Int         @default(0)
  sku           String?
  OrderItem     OrderItem[]
}

// ---------------------------
// Blog Posts
// ---------------------------
model BlogPost {
  id         String   @id @default(cuid())
  title      String
  slug       String   @unique
  content    String
  categories String[]
  tags       String[]
  isDraft    Boolean  @default(true)
  authorId   String
  author     User     @relation(fields: [authorId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// ---------------------------
// Orders
// ---------------------------
model Order {
  id          String      @id @default(cuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id])
  products    OrderItem[]
  status      OrderStatus @default(PENDING)
  totalAmount Float
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String          @id @default(cuid())
  orderId   String
  order     Order           @relation(fields: [orderId], references: [id])
  productId String
  product   Product         @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  quantity  Int
  price     Float
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

// ---------------------------
// Testimonials
// ---------------------------
model Testimonial {
  id        String   @id @default(cuid())
  name      String
  role      String?
  message   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ---------------------------
// Special Offers / Programs
// ---------------------------
model SpecialOffer {
  id          String   @id @default(cuid())
  title       String
  description String
  steps       String[] // 3-step process
  finePrint   String?
  ctaText     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
